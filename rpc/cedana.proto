syntax = "proto3";

package cedana;

option go_package = "./cedana-orchestrator";

service Cedana {

    // unary call registering client with server
    rpc RegisterClient(ClientState) returns (ConfigClient) {}

    // client-server streaming state 
    rpc RecordState(stream ClientState) returns (ClientStateAck) {}

}

// Encapsulates data required for the server to make checkpointing decisions
message ClientState {
    int64 timestamp = 1;
    ClientInfo client_info = 2;
    ProcessInfo process_info = 3;
}

message ClientInfo {
    int32 memory = 1;
    int32 cpus = 2; 
    int32 storage_space = 3;
    int32 available_storage = 4;
    string filesystem = 5;
    NetworkParams network = 6;
}

message NetworkParams {
    repeated string active_connections = 1;
}

message ProcessInfo { 
    int32 process_pid = 1;
}

message ConfigClient {
    int32 dump_frequency = 1;
    string orchestrator_info = 2;
}

message ClientStateAck {
    int64 timestamp = 1;
    bool acked = 2;
}

message DumpCommandRequest {

}

message DumpCommandResponse {

}

message RestoreCommand {

}

message RestoreCommandResponse {

}

message TransferCheckpoint {

} 
